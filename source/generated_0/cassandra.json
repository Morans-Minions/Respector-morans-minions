{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "http://localhost:8080"
    }
  ],
  "info": {
    "title": "REST API",
    "version": "",
    "description": "REST API"
  },
  "paths": {
    "/api/v0/lifecycle/configure": {
      "post": {
        "description": "",
        "operationId": "em36",
        "parameters": [
          {
            "name": "profile",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "BAD_REQUEST"
          },
          "406": {
            "description": "NOT_ACCEPTABLE"
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1lifecycle~1configure/post"
        }
      }
    },
    "/api/v0/lifecycle/pid": {
      "get": {
        "description": "",
        "operationId": "em38",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "NO_CONTENT"
          },
          "default": {
            "description": "others"
          }
        }
      }
    },
    "/api/v0/lifecycle/start": {
      "post": {
        "description": "",
        "operationId": "em34",
        "parameters": [
          {
            "name": "profile",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "replace_ip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "ACCEPTED"
          },
          "206": {
            "description": "PARTIAL_CONTENT"
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1lifecycle~1start/post"
        }
      }
    },
    "/api/v0/lifecycle/stop": {
      "post": {
        "description": "",
        "operationId": "em35",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1lifecycle~1stop/post"
        }
      }
    },
    "/api/v0/metadata/endpoints": {
      "get": {
        "description": "",
        "operationId": "em31",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1metadata~1endpoints/get"
        }
      }
    },
    "/api/v0/metadata/localdc": {
      "get": {
        "description": "",
        "operationId": "em32",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1metadata~1localdc/get"
        }
      }
    },
    "/api/v0/metadata/versions/features": {
      "get": {
        "description": "",
        "operationId": "em33",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1metadata~1versions~1features/get"
        }
      }
    },
    "/api/v0/metadata/versions/release": {
      "get": {
        "description": "",
        "operationId": "em30",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1metadata~1versions~1release/get"
        }
      }
    },
    "/api/v0/ops/auth/role": {
      "post": {
        "description": "",
        "operationId": "em50",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_superuser",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "can_login",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1auth~1role/post"
        }
      }
    },
    "/api/v0/ops/executor/job": {
      "get": {
        "description": "",
        "operationId": "em49",
        "parameters": [
          {
            "name": "job_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1executor~1job/get"
        }
      }
    },
    "/api/v0/ops/keyspace": {
      "get": {
        "description": "",
        "operationId": "em43",
        "parameters": [
          {
            "name": "keyspaceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1keyspace/get"
        }
      }
    },
    "/api/v0/ops/keyspace/alter": {
      "post": {
        "description": "",
        "operationId": "em42",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "keyspaceName": {
                    "type": "string"
                  },
                  "replicationSettings": {
                    "type": "string"
                  }
                },
                "maxProperties": 2
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1keyspace~1alter/post"
        }
      }
    },
    "/api/v0/ops/keyspace/cleanup": {
      "post": {
        "description": "",
        "operationId": "em39",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "jobs": {
                    "type": "integer"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "tables": {
                    "type": "string"
                  }
                },
                "maxProperties": 3
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1keyspace~1cleanup/post"
        }
      }
    },
    "/api/v0/ops/keyspace/create": {
      "post": {
        "description": "",
        "operationId": "em41",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "keyspaceName": {
                    "type": "string"
                  },
                  "replicationSettings": {
                    "type": "string"
                  }
                },
                "maxProperties": 2
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1keyspace~1create/post"
        }
      }
    },
    "/api/v0/ops/keyspace/refresh": {
      "post": {
        "description": "",
        "operationId": "em40",
        "parameters": [
          {
            "name": "keyspaceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1keyspace~1refresh/post"
        }
      }
    },
    "/api/v0/ops/keyspace/replication": {
      "get": {
        "description": "",
        "operationId": "em44",
        "parameters": [
          {
            "name": "keyspaceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST"
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1keyspace~1replication/get"
        }
      }
    },
    "/api/v0/ops/node/assassinate": {
      "post": {
        "description": "",
        "operationId": "em16",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1assassinate/post"
        }
      }
    },
    "/api/v0/ops/node/compaction": {
      "post": {
        "description": "",
        "operationId": "em15",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1compaction/post"
        }
      }
    },
    "/api/v0/ops/node/decommission": {
      "post": {
        "description": "",
        "operationId": "em14",
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1decommission/post"
        }
      }
    },
    "/api/v0/ops/node/drain": {
      "post": {
        "description": "",
        "operationId": "em18",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1drain/post"
        }
      }
    },
    "/api/v0/ops/node/fullquerylogging": {
      "get": {
        "description": "",
        "operationId": "em28",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1fullquerylogging/get"
        }
      },
      "post": {
        "description": "",
        "operationId": "em27",
        "parameters": [
          {
            "name": "enabled",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1fullquerylogging/post"
        }
      }
    },
    "/api/v0/ops/node/hints/truncate": {
      "post": {
        "description": "",
        "operationId": "em19",
        "parameters": [
          {
            "name": "host",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1hints~1truncate/post"
        }
      }
    },
    "/api/v0/ops/node/logging": {
      "post": {
        "description": "",
        "operationId": "em17",
        "parameters": [
          {
            "name": "target",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawLevel",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1logging/post"
        }
      }
    },
    "/api/v0/ops/node/move": {
      "post": {
        "description": "",
        "operationId": "em29",
        "parameters": [
          {
            "name": "newToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1move/post"
        }
      }
    },
    "/api/v0/ops/node/repair": {
      "post": {
        "description": "",
        "operationId": "em26",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "full": {
                    "type": "boolean"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "tables": {
                    "type": "string"
                  }
                },
                "maxProperties": 3
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1repair/post"
        }
      }
    },
    "/api/v0/ops/node/schema/reload": {
      "post": {
        "description": "",
        "operationId": "em21",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1schema~1reload/post"
        }
      }
    },
    "/api/v0/ops/node/schema/reset": {
      "post": {
        "description": "",
        "operationId": "em20",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1schema~1reset/post"
        }
      }
    },
    "/api/v0/ops/node/snapshots": {
      "delete": {
        "description": "",
        "operationId": "em25",
        "parameters": [
          {
            "name": "snapshotNames",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "keyspaces",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1snapshots/delete"
        }
      },
      "get": {
        "description": "",
        "operationId": "em23",
        "parameters": [
          {
            "name": "snapshotNames",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "keyspaces",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1snapshots/get"
        }
      },
      "post": {
        "description": "",
        "operationId": "em24",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "keyspaceTables": {
                    "type": "string"
                  },
                  "keyspaces": {
                    "type": "string"
                  },
                  "skipFlush": {
                    "type": "boolean"
                  },
                  "snapshotName": {
                    "type": "string"
                  },
                  "tableName": {
                    "type": "string"
                  }
                },
                "maxProperties": 5
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1snapshots/post"
        }
      }
    },
    "/api/v0/ops/node/streaminfo": {
      "get": {
        "description": "",
        "operationId": "em22",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1node~1streaminfo/get"
        }
      }
    },
    "/api/v0/ops/seeds/reload": {
      "post": {
        "description": "",
        "operationId": "em48",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1seeds~1reload/post"
        }
      }
    },
    "/api/v0/ops/tables": {
      "get": {
        "description": "",
        "operationId": "em12",
        "parameters": [
          {
            "name": "keyspaceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST"
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1tables/get"
        }
      }
    },
    "/api/v0/ops/tables/compact": {
      "post": {
        "description": "",
        "operationId": "em9",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "endToken": {
                    "type": "string"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "splitOutput": {
                    "type": "boolean"
                  },
                  "startToken": {
                    "type": "string"
                  },
                  "tables": {
                    "type": "string"
                  },
                  "userDefined": {
                    "type": "boolean"
                  },
                  "userDefinedFiles": {
                    "type": "string"
                  }
                },
                "maxProperties": 7
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1tables~1compact/post"
        }
      }
    },
    "/api/v0/ops/tables/create": {
      "post": {
        "description": "",
        "operationId": "em13",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "columns": {
                    "type": "string"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "options": {
                    "type": "string"
                  },
                  "tableName": {
                    "type": "string"
                  }
                },
                "maxProperties": 4
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1tables~1create/post"
        }
      }
    },
    "/api/v0/ops/tables/flush": {
      "post": {
        "description": "",
        "operationId": "em11",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "jobs": {
                    "type": "integer"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "tables": {
                    "type": "string"
                  }
                },
                "maxProperties": 3
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1tables~1flush/post"
        }
      }
    },
    "/api/v0/ops/tables/garbagecollect": {
      "post": {
        "description": "",
        "operationId": "em10",
        "parameters": [
          {
            "name": "tombstoneOption",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "jobs": {
                    "type": "integer"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "tables": {
                    "type": "string"
                  }
                },
                "maxProperties": 3
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1tables~1garbagecollect/post"
        }
      }
    },
    "/api/v0/ops/tables/scrub": {
      "post": {
        "description": "",
        "operationId": "em7",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "checkData": {
                    "type": "boolean"
                  },
                  "disableSnapshot": {
                    "type": "boolean"
                  },
                  "jobs": {
                    "type": "integer"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "reinsertOverflowedTTL": {
                    "type": "boolean"
                  },
                  "skipCorrupted": {
                    "type": "boolean"
                  },
                  "tables": {
                    "type": "string"
                  }
                },
                "maxProperties": 7
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1tables~1scrub/post"
        }
      }
    },
    "/api/v0/ops/tables/sstables/upgrade": {
      "post": {
        "description": "",
        "operationId": "em8",
        "parameters": [
          {
            "name": "excludeCurrentVersion",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "jobs": {
                    "type": "integer"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "tables": {
                    "type": "string"
                  }
                },
                "maxProperties": 3
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1ops~1tables~1sstables~1upgrade/post"
        }
      }
    },
    "/api/v0/probes/cluster": {
      "get": {
        "description": "",
        "operationId": "em47",
        "parameters": [
          {
            "name": "consistency_level",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rf_per_dc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1probes~1cluster/get"
        }
      }
    },
    "/api/v0/probes/liveness": {
      "get": {
        "description": "",
        "operationId": "em45",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        }
      }
    },
    "/api/v0/probes/readiness": {
      "get": {
        "description": "",
        "operationId": "em46",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v0~1probes~1readiness/get"
        }
      }
    },
    "/api/v1/ops/keyspace/cleanup": {
      "post": {
        "description": "",
        "operationId": "em6",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "jobs": {
                    "type": "integer"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "tables": {
                    "type": "string"
                  }
                },
                "maxProperties": 3
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v1~1ops~1keyspace~1cleanup/post"
        }
      }
    },
    "/api/v1/ops/node/decommission": {
      "post": {
        "description": "",
        "operationId": "em3",
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v1~1ops~1node~1decommission/post"
        }
      }
    },
    "/api/v1/ops/node/rebuild": {
      "post": {
        "description": "",
        "operationId": "em4",
        "parameters": [
          {
            "name": "src_dc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v1~1ops~1node~1rebuild/post"
        }
      }
    },
    "/api/v1/ops/node/schema/versions": {
      "get": {
        "description": "",
        "operationId": "em5",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v1~1ops~1node~1schema~1versions/get"
        }
      }
    },
    "/api/v1/ops/tables/compact": {
      "post": {
        "description": "",
        "operationId": "em2",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "endToken": {
                    "type": "string"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "splitOutput": {
                    "type": "boolean"
                  },
                  "startToken": {
                    "type": "string"
                  },
                  "tables": {
                    "type": "string"
                  },
                  "userDefined": {
                    "type": "boolean"
                  },
                  "userDefinedFiles": {
                    "type": "string"
                  }
                },
                "maxProperties": 7
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v1~1ops~1tables~1compact/post"
        }
      }
    },
    "/api/v1/ops/tables/scrub": {
      "post": {
        "description": "",
        "operationId": "em0",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "checkData": {
                    "type": "boolean"
                  },
                  "disableSnapshot": {
                    "type": "boolean"
                  },
                  "jobs": {
                    "type": "integer"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "reinsertOverflowedTTL": {
                    "type": "boolean"
                  },
                  "skipCorrupted": {
                    "type": "boolean"
                  },
                  "tables": {
                    "type": "string"
                  }
                },
                "maxProperties": 7
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v1~1ops~1tables~1scrub/post"
        }
      }
    },
    "/api/v1/ops/tables/sstables/upgrade": {
      "post": {
        "description": "",
        "operationId": "em1",
        "parameters": [
          {
            "name": "excludeCurrentVersion",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "others"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "jobs": {
                    "type": "integer"
                  },
                  "keyspaceName": {
                    "type": "string"
                  },
                  "tables": {
                    "type": "string"
                  }
                },
                "maxProperties": 3
              }
            }
          }
        },
        "x-endpoint-constraints": {
          "$ref": "#/components/x-endpoint-constraints/~1api~1v1~1ops~1tables~1sstables~1upgrade/post"
        }
      }
    }
  },
  "components": {
    "x-endpoint-constraints": {
      "/api/v0/lifecycle/configure": {
        "post": {
          "valid-path-conditions": [
            "( this.<com.datastax.mgmtapi.resources.LifecycleResources: com.datastax.mgmtapi.ManagementApplication app>.<com.datastax.mgmtapi.ManagementApplication: com.datastax.mgmtapi.ManagementApplication$STATE getRequestedState()>() != <com.datastax.mgmtapi.ManagementApplication$STATE: com.datastax.mgmtapi.ManagementApplication$STATE STARTED> )"
          ],
          "global-reads": {
            "g2": {
              "name": "STARTED",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g2"
              }
            },
            "g11": {
              "name": "BAD_REQUEST",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g11"
              }
            },
            "g12": {
              "name": "yamlMapper",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g12"
              }
            },
            "g13": {
              "name": "NOT_ACCEPTABLE",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g13"
              }
            }
          }
        }
      },
      "/api/v0/lifecycle/start": {
        "post": {
          "global-reads": {
            "g2": {
              "name": "STARTED",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g2"
              }
            },
            "g3": {
              "name": "SECONDS",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g3"
              }
            },
            "g4": {
              "name": "PROTOCOL_VERSION",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g4"
              }
            },
            "g5": {
              "name": "REQUEST_TIMEOUT",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g5"
              }
            },
            "g6": {
              "name": "logger",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g6"
              }
            },
            "g7": {
              "name": "cache",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g7"
              }
            }
          },
          "global-writes": {
            "g6": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/UnixSocketCQLAccess;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g6"
              }
            },
            "g7": {
              "name": "cache",
              "assigned-values": [
                "staticinvoke <com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g7"
              }
            }
          }
        }
      },
      "/api/v0/lifecycle/stop": {
        "post": {
          "global-reads": {
            "g8": {
              "name": "logger",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g8"
              }
            },
            "g9": {
              "name": "SECONDS",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g9"
              }
            },
            "g10": {
              "name": "STOPPED",
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g10"
              }
            }
          }
        }
      },
      "/api/v0/metadata/endpoints": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/metadata/localdc": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/metadata/versions/features": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/metadata/versions/release": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/auth/role": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/executor/job": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/keyspace": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/keyspace/alter": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/keyspace/cleanup": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/keyspace/create": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/keyspace/refresh": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/keyspace/replication": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/assassinate": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/compaction": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/decommission": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/drain": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/fullquerylogging": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        },
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/hints/truncate": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/logging": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/move": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/repair": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/schema/reload": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/schema/reset": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/snapshots": {
        "delete": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        },
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        },
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/node/streaminfo": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/seeds/reload": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/tables": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/tables/compact": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/tables/create": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/tables/flush": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/tables/garbagecollect": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/tables/scrub": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/ops/tables/sstables/upgrade": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/probes/cluster": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v0/probes/readiness": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v1/ops/keyspace/cleanup": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v1/ops/node/decommission": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v1/ops/node/rebuild": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v1/ops/node/schema/versions": {
        "get": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v1/ops/tables/compact": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v1/ops/tables/scrub": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      },
      "/api/v1/ops/tables/sstables/upgrade": {
        "post": {
          "global-writes": {
            "g0": {
              "name": "classes",
              "assigned-values": [
                "(java.util.Map) staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>().<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"bootstrap\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.hints\", \"org.apache.cassandra.schema\", \"org.apache.cassandra.service.StorageService\", \"org.apache.cassandra.db.SystemKeyspace\", \"org.apache.cassandra.batchlog.BatchlogManager\", \"org.apache.cassandra.net.MessagingService\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"repair\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.repair\", \"org.apache.cassandra.db.compaction.CompactionManager\", \"org.apache.cassandra.service.SnapshotVerbHandler\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"streaming\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.streaming\", \"org.apache.cassandra.dht.RangeStreamer\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"compaction\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.db.compaction\", \"org.apache.cassandra.db.ColumnFamilyStore\", \"org.apache.cassandra.io.sstable.IndexSummaryRedistribution\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"cql\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.cql3\", \"org.apache.cassandra.auth\", \"org.apache.cassandra.batchlog\", \"org.apache.cassandra.net.ResponseVerbHandler\", \"org.apache.cassandra.service.AbstractReadExecutor\", \"org.apache.cassandra.service.AbstractWriteResponseHandler\", \"org.apache.cassandra.service.paxos\", \"org.apache.cassandra.service.ReadCallback\", \"org.apache.cassandra.service.ResponseResolver\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(\"ring\", staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(\"org.apache.cassandra.gms\", \"org.apache.cassandra.service.PendingRangeCalculatorService\", \"org.apache.cassandra.service.LoadBroadcaster\", \"org.apache.cassandra.transport.Server\")).<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>()"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g0"
              }
            },
            "g1": {
              "name": "logger",
              "assigned-values": [
                "staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class \"Lcom/datastax/mgmtapi/resources/NodeOpsResources;\")"
              ],
              "location-details": {
                "$ref": "#/components/x-global-variables-info/g1"
              }
            }
          }
        }
      }
    },
    "x-endpoint-interdependence": {
      "g6": {
        "location-details": {
          "$ref": "#/components/x-global-variables-info/g6"
        },
        "read-by": {
          "em34": {
            "$ref": "#/paths/~1api~1v0~1lifecycle~1start/post"
          }
        },
        "written-by": {
          "em34": {
            "$ref": "#/paths/~1api~1v0~1lifecycle~1start/post"
          }
        }
      },
      "g7": {
        "location-details": {
          "$ref": "#/components/x-global-variables-info/g7"
        },
        "read-by": {
          "em34": {
            "$ref": "#/paths/~1api~1v0~1lifecycle~1start/post"
          }
        },
        "written-by": {
          "em34": {
            "$ref": "#/paths/~1api~1v0~1lifecycle~1start/post"
          }
        }
      }
    },
    "x-global-variables-info": {
      "g0": {
        "name": "classes",
        "id": "g0",
        "defining-class": "com.datastax.mgmtapi.resources.NodeOpsResources",
        "locations-of-static-assignments": [
          "line 92, com.datastax.mgmtapi.resources.NodeOpsResources"
        ]
      },
      "g1": {
        "name": "logger",
        "id": "g1",
        "defining-class": "com.datastax.mgmtapi.resources.NodeOpsResources",
        "locations-of-static-assignments": [
          "line 52, com.datastax.mgmtapi.resources.NodeOpsResources"
        ]
      },
      "g2": {
        "name": "STARTED",
        "id": "g2",
        "defining-class": "com.datastax.mgmtapi.ManagementApplication$STATE",
        "locations-of-static-assignments": [
          "line 123, com.datastax.mgmtapi.ManagementApplication$STATE"
        ]
      },
      "g3": {
        "name": "SECONDS",
        "id": "g3",
        "defining-class": "java.time.temporal.ChronoUnit"
      },
      "g4": {
        "name": "PROTOCOL_VERSION",
        "id": "g4",
        "defining-class": "com.datastax.oss.driver.api.core.config.DefaultDriverOption"
      },
      "g5": {
        "name": "REQUEST_TIMEOUT",
        "id": "g5",
        "defining-class": "com.datastax.oss.driver.api.core.config.DefaultDriverOption"
      },
      "g6": {
        "name": "logger",
        "id": "g6",
        "defining-class": "com.datastax.mgmtapi.UnixSocketCQLAccess",
        "locations-of-static-assignments": [
          "line 80, com.datastax.mgmtapi.UnixSocketCQLAccess"
        ]
      },
      "g7": {
        "name": "cache",
        "id": "g7",
        "defining-class": "com.datastax.mgmtapi.UnixSocketCQLAccess",
        "locations-of-static-assignments": [
          "line 81, com.datastax.mgmtapi.UnixSocketCQLAccess"
        ]
      },
      "g8": {
        "name": "logger",
        "id": "g8",
        "defining-class": "com.datastax.mgmtapi.resources.LifecycleResources",
        "locations-of-static-assignments": [
          "line 56, com.datastax.mgmtapi.resources.LifecycleResources"
        ]
      },
      "g9": {
        "name": "SECONDS",
        "id": "g9",
        "defining-class": "java.util.concurrent.TimeUnit"
      },
      "g10": {
        "name": "STOPPED",
        "id": "g10",
        "defining-class": "com.datastax.mgmtapi.ManagementApplication$STATE",
        "locations-of-static-assignments": [
          "line 124, com.datastax.mgmtapi.ManagementApplication$STATE"
        ]
      },
      "g11": {
        "name": "BAD_REQUEST",
        "id": "g11",
        "defining-class": "javax.ws.rs.core.Response$Status"
      },
      "g12": {
        "name": "yamlMapper",
        "id": "g12",
        "defining-class": "com.datastax.mgmtapi.resources.LifecycleResources",
        "locations-of-static-assignments": [
          "line 59, com.datastax.mgmtapi.resources.LifecycleResources"
        ]
      },
      "g13": {
        "name": "NOT_ACCEPTABLE",
        "id": "g13",
        "defining-class": "javax.ws.rs.core.Response$Status"
      }
    }
  }
}